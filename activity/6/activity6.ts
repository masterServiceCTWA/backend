


/*
    Объекты
    Объекты содержат в себе поля и методы (функции)
*/

//Этот объект представляет автомобиль с тремя свойствами: марка, модель и год.
  
const car = {
    mark: "Toyota",
    model: "Camry",
    year: 2023,
    signal() {
        console.log(`beep`);
    }
};
  
//TypeScript позволяет определять инткрфейсы (типы) объектов, которые задают ожидаемую структуру объекта:
  
  interface ICar {
    mark: string;
    model: string;
    year: number;
    signal() : void;
  };
  
  const car1 : ICar = {
    mark: "Toyota",
    model: "Camry",
    year: 2023,
    signal() {
        console.log(`beep`);
    }
  };

  const car2 : ICar = {
    mark: "BMW",
    model : "x5",
    year : 2010,
    signal() {
        console.log("kokoko");
    }
  };

/*
    Встроенные в node.js объекты

console: Обеспечивает методы для вывода сообщений в стандартный вывод и стандартную ошибку.
process: Представляет текущий процесс Node.js, предоставляя информацию о его состоянии, событиях и методах управления.
global: Представляет глобальную область видимости, содержащую все глобальные переменные и функции.
__dirname: Содержит абсолютный путь к каталогу, в котором находится текущий модуль.
__filename: Содержит абсолютный путь к файлу текущего модуля.

events: Для создания и управления событиями
fs: Для работы с файловой системой
http: Для создания и управления HTTP-серверами и клиентами
os: Для получения информации о текущей операционной системе
path: Для работы с файловыми путями
timers: Для создания и управления таймерами
url: Для работы с URL-адресами
Date: представляет дату и время. Он является встроенным объектом, поэтому доступен во всех модулях без необходимости импорта.

Некоторые распространенные методы:
*/

Date.now() //- возвращает текущее время в миллисекундах с начала эпохи Unix (1 января 1970 г. 00:00:00 по Гринвичу)
Date.parse("2024-11-19 11:20:32.018511+00") //- анализирует строку даты и возвращает время в миллисекундах с начала эпохи Unix
Date.UTC(1990,1,12) //- создает объект Date с указанным временем в формате UTC (Всемирное координированное время)
const date = new Date();
date.getDate() //- возвращает день месяца (от 1 до 31)
date.getDay() //- возвращает день недели (от 0 до 6, где 0 - воскресенье)
date.getFullYear() //- возвращает год
date.getHours() //- возвращает часы (от 0 до 23)
date.getMinutes() //- возвращает минуты (от 0 до 59)
date.getSeconds() //- возвращает секунды (от 0 до 59)
date.getTime() //- возвращает время в миллисекундах с начала эпохи Unix



/*
    JSON
    Строковое представление объекта

    1 - Общепринятый формат передачи обектов (данных) в интернете. Самый популярный на текущий момент
    2 - Так же можно любой объект можно преобразовать в JSON, например, чтобы вывести на консоль.
    3 - Иногда, например, нужно передавать данные между серверами в виде строки. 
    4 - В базах данных можно хранить объект в виде строки: 
        -   Работа с документами и коллекциями в базах данных NoSQL  (Например монго)
        -   Хранение по ключ-значению в Редисе (строка-строка) 
        -   Хранение в виде строки в SQL базах. Либо, например в PostgreSQL есть тип данных JSON
        -   Хранение настроек в формате JSON. Удобно, когда настройки должны храниться независимо от языка программирования 
*/

class SomeClass {
    field : string;
    someObject : {
        name : string
    };
}

const objectToJSON : SomeClass= {
    field : "поле строковое",
    someObject : {
        name : "Какой то объект"
    }
}

// Превращаем объект в строку с помощью встроенного объекта JSON и метода stringify()
const jsonForObject : string = JSON.stringify(objectToJSON);

// Наоборот. Превращение строки в объект с помощью метода parse()
// Если строка не будет соответствовать объекту выброситься ошибка... 
const convertedObject : SomeClass = JSON.parse(jsonForObject);